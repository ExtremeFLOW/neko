name: Setup the pFUnit library
description: |
  This action sets up the pFUnit library for use in the main workflow.

inputs:
  install-dir:
    description: "The directory to install the pFUnit library."
    required: false
    default: "${{ runner.workspace }}/pkg"
  working-dir:
    description: "The directory to work in."
    required: false
    default: "${{ runner.workspace }}/tmp"
  os:
    description: "The operating system to use."
    required: false
    default: "${{ runner.os }}"
  compiler:
    description: "The compiler to use."
    required: false
    default: "mpif90"
  compiler-flags:
    description: "The compiler flag to use."
    required: false
    default: "-O3"
  build-options:
    description: "The build option to use."
    required: false
    default: "--parallel $(nproc)"
  version:
    description: "The version of the pFUnit library to use."
    required: false
    default: "v4.8.0"

outputs:
  install-dir:
    description: "The directory where the pFUnit library was installed."
    value: ${{ steps.set-output.outputs.install-dir }}

runs:
  using: composite
  steps:
    - name: Set up environment
      id: setup-env
      shell: bash
      env:
        WORKING_DIR: ${{ inputs.working-dir }}
        INSTALL_DIR: ${{ inputs.install-dir }}
      run: |
        TAG=${{ inputs.version }}-${{ inputs.os }}-${{ inputs.compiler }}
        WORKING_DIR=$WORKING_DIR/pfunit-$TAG
        INSTALL_DIR=$INSTALL_DIR/pfunit-$TAG

        mkdir -p $WORKING_DIR $INSTALL_DIR

        echo "working-dir=$(echo $(realpath $WORKING_DIR))" >> $GITHUB_OUTPUT
        echo "install-dir=$(echo $(realpath $INSTALL_DIR))" >> $GITHUB_OUTPUT
        echo "tag=$(echo $TAG)" >> $GITHUB_OUTPUT

    - name: Cache
      id: cache-pfunit
      uses: actions/cache@v4
      with:
        path: ${{ steps.setup-env.outputs.install-dir }}
        key: pfunit-${{ steps.setup-env.outputs.tag }}

    - name: Clone
      if: ${{ steps.cache-pfunit.outputs.cache-hit != 'true' }}
      shell: bash
      env:
        WORKING_DIR: ${{ steps.setup-env.outputs.working-dir }}
        REPO: https://github.com/Goddard-Fortran-Ecosystem/pFUnit.git
        VERSION: ${{ inputs.version }}
      run: |
        [ ! -z "$(ls -A $WORKING_DIR)" ] && rm -fr $WORKING_DIR
        git clone --depth 1 --branch $VERSION $REPO $WORKING_DIR

    - name: Patch
      if: ${{ steps.cache-pfunit.outputs.cache-hit != 'true' }}
      shell: bash
      env:
        WORKING_DIR: ${{ steps.setup-env.outputs.working-dir }}
      run: |
        if [ ${{ inputs.version }} != "v4.4.2" ]; then
          exit 0
        fi
        cur=$(pwd)
        cd $WORKING_DIR
        cat >> pfunit_error_stop.patch << _ACEOF
        diff --git a/src/funit/FUnit.F90 b/src/funit/FUnit.F90
        index 7df7b65..4f7dbf5 100644
        --- a/src/funit/FUnit.F90
        +++ b/src/funit/FUnit.F90
        @@ -168,7 +168,7 @@ contains
         #if defined(PGI)
                  call exit(-1)
         #else
        -         stop '*** Encountered 1 or more failures/errors during testing. ***'
        +         error stop '*** Encountered 1 or more failures/errors during testing. ***'
         #endif
               end if

        _ACEOF
        git apply pfunit_error_stop.patch
        cd $cur

    - name: Configure
      if: ${{ steps.cache-pfunit.outputs.cache-hit != 'true' }}
      shell: bash
      env:
        WORKING_DIR: ${{ steps.setup-env.outputs.working-dir }}
        INSTALL_DIR: ${{ steps.setup-env.outputs.install-dir }}
        FC: ${{ inputs.compiler }}
        FCFLAGS: ${{ inputs.compiler-flags }}
      run: |
        cmake -B $WORKING_DIR/build -S $WORKING_DIR \
          --install-prefix=$INSTALL_DIR

    - name: Build
      if: ${{ steps.cache-pfunit.outputs.cache-hit != 'true' }}
      shell: bash
      env:
        WORKING_DIR: ${{ steps.setup-env.outputs.working-dir }}
      run: |
        cmake --build $WORKING_DIR/build ${{ inputs.build-options }}

    - name: Install
      if: ${{ steps.cache-pfunit.outputs.cache-hit != 'true' }}
      shell: bash
      env:
        WORKING_DIR: ${{ steps.setup-env.outputs.working-dir }}
      run: |
        cmake --install $WORKING_DIR/build

    - name: Cleanup
      if: ${{ steps.cache-pfunit.outputs.cache-hit != 'true' }}
      shell: bash
      env:
        WORKING_DIR: ${{ steps.setup-env.outputs.working-dir }}
      run: |
        rm -fr $WORKING_DIR/build

    - name: Set output
      shell: bash
      id: set-output
      env:
        INSTALL_DIR: ${{ steps.setup-env.outputs.install-dir }}
      run: |
        if [ ! -d $INSTALL_DIR ]; then
          echo "Failed to install pFUnit"
          exit 1
        fi
        INSTALL_DIR=$(find $INSTALL_DIR -type d -exec test -f '{}/libpfunit.a' \; -print)
        INSTALL_DIR=$(realpath $INSTALL_DIR/../)
        echo "install-dir=$INSTALL_DIR" >> $GITHUB_OUTPUT
