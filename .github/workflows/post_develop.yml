# Description: This workflow is triggered when a PR is closed and merged into
# the develop branch.
# Currently we execute the following steps:
# 1. Check if the PR was merged.
# 2. Create a badge for the flint score.
# 3. Create badges for the compilation status of the different compilers.
# 4. Upload the badges to the repository.

name: Post merge develop

on:
  workflow_dispatch:
  workflow_call:
  pull_request:
    types: [closed]
    branches:
      - develop

env:
  PFUNIT_VERSION: v4.4.2
  JSON_FORTRAN_VERSION: 8.3.0

# Allow only one concurrent deployment, skipping runs queued between the run
# in-progress and latest queued. We do not wish to waste time on old runs if a
# newer one is available.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check_pr_status:
    runs-on: ubuntu-latest
    steps:
      - name: Check PR status
        run: |
          if [ "${{ github.event_name }}" != "pull_request" ]; then
            exit 0
          fi
          if [ "${{ github.event.pull_request.merged }}" == "true" ]; then
            echo "PR was merged"
            exit 0
          else
            echo "PR was closed without merging"
            exit 1
          fi

  prepare:
    name: Prepare the environment
    needs: check_pr_status
    runs-on: ubuntu-latest
    outputs:
      pfunit-version: ${{ steps.store.outputs.pfunit-version }}
      json-fortran-version: ${{ steps.store.outputs.json-fortran-version }}

    steps:
      - name: Store environment variables
        id: store
        run: |
          echo "flint-global-minimum=$FLINT_GLOBAL_MINIMUM" >> $GITHUB_OUTPUT
          echo "flint-changed-minimum=$FLINT_CHANGED_FILES_MINIMUM" >> $GITHUB_OUTPUT
          echo "pfunit-version=$PFUNIT_VERSION" >> $GITHUB_OUTPUT
          echo "json-fortran-version=$JSON_FORTRAN_VERSION" >> $GITHUB_OUTPUT

  # ========================================================================== #
  # Run the compiler checks

  GNU:
    needs: prepare
    uses: ./.github/workflows/check_gnu.yml
    with:
      json-fortran-version: ${{ needs.prepare.outputs.json-fortran-version }}
      pfunit-version: ${{ needs.prepare.outputs.pfunit-version }}

  Intel:
    needs: prepare
    uses: ./.github/workflows/check_intel.yml
    with:
      json-fortran-version: ${{ needs.prepare.outputs.json-fortran-version }}

  Nvidia:
    needs: prepare
    uses: ./.github/workflows/check_nvidia.yml
    with:
      json-fortran-version: ${{ needs.prepare.outputs.json-fortran-version }}

  # ========================================================================== #
  # Badge creation

  # Create a badge for the flint score
  create-badge-lint:
    name: "Create linting badge"
    runs-on: ubuntu-20.04
    needs: check_pr_status

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup env.
        run: |
          sudo apt-get update
          sudo apt-get install -yq python3-pip
          pip install anybadge

      - name: Lint repository
        uses: ./.github/actions/flint
        id: lint-repository
        with:
          directory: src/
          depth: 10
          rc-file: flinter_rc.yml

      - name: Create badge
        env:
            score: ${{ steps.lint-repository.outputs.score }}
        run: |
            mkdir -p doc/media
            anybadge -l Flint -o --file=doc/media/lint-badge.svg -v $score 9.0=red 9.9=yellow 10=green

      - name: Save artifact
        uses: actions/upload-artifact@v4
        with:
          name: lint-badge
          path: doc/media/lint-badge.svg

  create-compilation-badges:
    if: ${{ !cancelled() }}
    name: "Create Compilation badges"
    runs-on: ubuntu-20.04
    needs:
      - GNU
      - Intel
      - Nvidia

    steps:
      - name: Check status
        run: |
          [ ${{ needs.GNU.result }} == "skipped" ] && exit 1
          [ ${{ needs.Intel.result }} == "skipped" ] && exit 1
          [ ${{ needs.Nvidia.result }} == "skipped" ] && exit 1

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup env.
        run: |
          sudo apt-get update
          sudo apt-get install -yq python3-pip
          pip install anybadge

      - name: create directory
        run: |
          mkdir -p doc/media

      - name: Create badge GNU
        run: |
          anybadge -l GNU -v ${{ needs.GNU.result }} -o \
            -f=doc/media/gnu-badge.svg success=green failure=red

      - name: Create badge Intel
        run: |
          anybadge -l Intel -v ${{ needs.Intel.result }} -o \
            -f=doc/media/intel-badge.svg success=green failure=red

      - name: Create badge Nvidia
        run: |
          anybadge -l Nvidia -v ${{ needs.Nvidia.result }} -o \
            -f=doc/media/nvidia-badge.svg success=green failure=red

      - name: Save artifacts
        uses: actions/upload-artifact@v4
        with:
          name: compilation-badge
          path: doc/media/*-badge.svg

  # ========================================================================== #
  # Upload the badges

  upload-badges:
    name: "Upload badges"
    runs-on: ubuntu-20.04
    needs:
      - create-badge-lint
      - create-compilation-badges

    if: ${{ !cancelled() }} &&
        ${{ needs.create-badge-lint.result == 'success' }} &&
        ${{ needs.create-compilation-badges.result == 'success' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download lint badge
        uses: actions/download-artifact@v4
        with:
          pattern: "*-badge"
          path: doc/media/
          merge-multiple: true

      - name: Push badges
        uses: EndBug/add-and-commit@v9
        with:
          add: "doc/media/*-badge.svg"
          message: "Add badges"
          author_name: "GitHub Actions"
          default_author: github_actor