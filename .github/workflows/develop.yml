name: develop

# Controls when the action will run.
on:
  pull_request:
    branches: [develop, release/*]
    types:
      - opened
      - synchronize
      - reopened
      - ready_for_review
  workflow_dispatch:

  # Todo: this should be removed once the rework is done.
  push:
    branches: [cicd/rework]

# Allow only one concurrent deployment, skipping runs queued between the run
# in-progress and latest queued. We do not wish to waste time on old runs if a
# newer one is available.
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  is_draft:
    name: Check if PR is a draft
    runs-on: ubuntu-latest
    steps:
      - name: Check if PR is a draft
        run: |
          [ -z "${{ github.event.pull_request.draft }}" ] && exit 0
          [ "${{ github.event.pull_request.draft }}" == "true" ] && exit 1

  linting:
    name: Flint
    needs: is_draft
    uses: ./.github/workflows/check_lint.yml
    with:
      global_minimum_score: 8.0
      changed_files_minimum_score: 8.0

  GNU:
    needs:
      - is_draft
      - linting
    uses: ./.github/workflows/check_gnu.yml
    with:
      json-fortran-version: 8.3.0
      pfunit-version: v4.4.2

  Intel:
    needs:
      - is_draft
      - linting
    uses: ./.github/workflows/check_intel.yml
    with:
      json-fortran-version: 8.3.0

  NVIDIA:
    needs:
      - is_draft
      - linting
    uses: ./.github/workflows/check_nvidia.yml
    with:
      json-fortran-version: 8.3.0

  ReFrame:
    needs:
      - is_draft
      - linting
      - GNU
    uses: ./.github/workflows/check_reframe.yml
    with:
      json-fortran-version: 8.3.0

  check_complete:
    if: ${{ always() }}
    needs:
      - is_draft
      - linting
      - GNU
      - Intel
      - NVIDIA
      - ReFrame
    name: Develop PR Ready
    runs-on: ubuntu-latest
    env:
      is_draft: ${{ needs.is_draft.result }}
      linting_complete: ${{ needs.linting.result }}
      GNU_complete: ${{ needs.GNU.result }}
      Intel_complete: ${{ needs.Intel.result }}
      NVIDIA_complete: ${{ needs.NVIDIA.result }}
      ReFrame_complete: ${{ needs.ReFrame.result }}

    steps:
      - name: All checks passed
        run: |
          success=true
          fail=()
          if [ "$is_draft" != "success" ]; then
            fail+=("Draft check failed")
            success=false
          fi
          if [ "$linting_complete" != "success" ]; then
            fail+=("Linting check failed")
            success=false
          fi
          if [ "$GNU_complete" != "success" ]; then
            fail+=("GNU check failed")
            success=false
          fi
          if [ "$Intel_complete" != "success" ]; then
            fail+=("Intel check failed")
            success=false
          fi
          if [ "$NVIDIA_complete" != "success" ]; then
            fail+=("NVIDIA check failed")
            success=false
          fi
          if [ "$ReFrame_complete" != "success" ]; then
            fail+=("ReFrame check failed")
            success=false
          fi

          if [ "$success" = false ]; then
            >&2 echo "The following checks failed:"
            for i in "${fail[@]}"; do
              >&2 echo "$i"
            done
            exit 1
          fi
          echo "All checks passed"
