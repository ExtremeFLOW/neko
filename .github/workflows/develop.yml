name: develop

# Controls when the action will run.
on:
  pull_request:
    branches: [develop, release/*]
    types:
      - opened
      - synchronize
      - reopened
      - ready_for_review
  workflow_dispatch:

# Allow only one concurrent deployment, skipping runs queued between the run
# in-progress and latest queued. We do not wish to waste time on old runs if a
# newer one is available.
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  is_draft:
    name: Check if PR is a draft
    runs-on: ubuntu-latest
    steps:
      - name: Check if PR is a draft
        shell: bash
        run: |
          if [ "${{ github.event.pull_request.draft }}" == "true" ]; then
            exit 1
          fi

  linting:
    name: Flint
    needs: is_draft
    uses: ./.github/workflows/check_lint.yml
    with:
      global-minimum-score: ${{ vars.FLINT_GLOBAL_MINIMUM }}
      changed-files-minimum-score: ${{ vars.FLINT_CHANGED_FILES_MINIMUM }}

  GNU:
    needs:
      - is_draft
      - linting
    uses: ./.github/workflows/check_gnu.yml
    with:
      json-fortran-version: ${{ vars.JSON_FORTRAN_VERSION }}
      pfunit-version: ${{ vars.PFUNIT_VERSION }}

  Intel:
    needs:
      - is_draft
      - linting
    uses: ./.github/workflows/check_intel.yml
    with:
      json-fortran-version: ${{ vars.JSON_FORTRAN_VERSION }}

  NVIDIA:
    needs:
      - is_draft
      - linting
    uses: ./.github/workflows/check_nvidia.yml
    with:
      json-fortran-version: ${{ vars.JSON_FORTRAN_VERSION }}

  ReFrame:
    needs:
      - is_draft
      - linting
      - GNU
    uses: ./.github/workflows/check_reframe.yml
    with:
      json-fortran-version: ${{ vars.JSON_FORTRAN_VERSION }}

  check_complete:
    name: Develop PR Ready
    if: ${{ always() }}
    needs:
      - is_draft
      - linting
      - GNU
      - Intel
      - NVIDIA
      - ReFrame
    runs-on: ubuntu-latest
    env:
      draft_status: ${{ needs.is_draft.result }}
      flint_status: ${{ needs.linting.result }}
      gnu_status: ${{ needs.GNU.result }}
      inel_status: ${{ needs.Intel.result }}
      nvidia_status: ${{ needs.NVIDIA.result }}
      reframe_status: ${{ needs.ReFrame.result }}

    steps:
      - name: All checks passed
        run: |
          success=true
          fail=()
          if [ "$draft_status" != "success" ]; then
            fail+=("\t- Draft check: $draft_status")
            success=false
          fi
          if [ "$flint_status" != "success" ]; then
            fail+=("\t- Linting check: $flint_status")
            success=false
          fi
          if [ "$gnu_status" != "success" ]; then
            fail+=("\t- GNU check: $gnu_status")
            success=false
          fi
          if [ "$inel_status" != "success" ]; then
            fail+=("\t- Intel check: $inel_status")
            success=false
          fi
          if [ "$nvidia_status" != "success" ]; then
            fail+=("\t- NVIDIA check: $nvidia_status")
            success=false
          fi
          if [ "$reframe_status" != "success" ]; then
            fail+=("\t- ReFrame check: $reframe_status")
            success=false
          fi

          if [ "$success" = false ]; then
            >&2 echo "The following checks failed:"
            for i in "${fail[@]}"; do
              >&2 printf "$i\n"
            done
            exit 1
          fi
          echo "All checks passed"
