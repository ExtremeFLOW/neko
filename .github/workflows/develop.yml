name: develop

# Controls when the action will run. 
on:
  pull_request:
     branches: [develop]
  workflow_dispatch:
  
jobs:
  GNU:
    
    runs-on: ${{matrix.os}}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04]
        compiler: [gfortran-10]
        include:
        - os: ubuntu-20.04
          setup-env: sudo apt install -y openmpi-bin libopenmpi-dev autoconf automake autotools-dev libopenblas-dev make git m4 python3 cmake ca-certificates
    env:
      FC: ${{ matrix.compiler }}
      OMPI_ALLOW_RUN_AS_ROOT: 1
      OMPI_ALLOW_RUN_AS_ROOT_CONFIRM: 1
      OMPI_MCA_btl_vader_single_copy_mechanism: none
    name: ${{ matrix.os }} / ${{ matrix.compiler }}
    steps:
      - name: Setup env.
        run: ${{ matrix.setup-env }}
      - name: Cache pFUnit
        id: cache-pfunit
        uses: actions/cache@v2
        with:
          path: ~/pkg/pfunit
          key: pfunit-${{ runner.os }}-${{ matrix.os }}-${{ matrix.compiler }}
      - name: Build pFUnit
        if: steps.cache-pfunit.outputs.cache-hit != 'true'
        run: |
          git clone https://github.com/Goddard-Fortran-Ecosystem/pFUnit.git
          cd pFUnit && mkdir b && cd b
          cmake -DCMAKE_INSTALL_PREFIX=${HOME}/pkg/pfunit ..
          make -j$(nproc) && make install && cd ../../
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Build
        run: |
          ./regen.sh
          ./configure FC=${FC} FCFLAGS="-O2 -pedantic -std=f2008"  --with-pfunit=${HOME}/pkg/pfunit/PFUNIT-4.2
          make -j$(nproc)
      - name: Check
        run: |
          make -j$(nproc) check
      - name: Dist
        run: |
          make dist
          tar xf neko-0.0.1.tar.gz
          cd neko-0.0.1
          ./configure FC=${FC}
          make -j $(nproc)

  Intel:
    runs-on: ubuntu-20.04
    env:
     FC: ifort
     CC: icc
    name: Intel Fortran
    steps:
      - name: Setup env.
        run: |
          cd /tmp
          wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
          sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
          rm GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
          sudo add-apt-repository "deb https://apt.repos.intel.com/oneapi all main"
          sudo apt install --no-install-recommends intel-oneapi-compiler-fortran intel-oneapi-mpi intel-oneapi-mpi-devel intel-oneapi-compiler-dpcpp-cpp-and-cpp-classic
          source /opt/intel/oneapi/setvars.sh
          sudo apt install -y autoconf automake autotools-dev libopenblas-dev make git m4 python3 ca-certificates cmake
          printenv >> $GITHUB_ENV
      - name: Checkout
        uses: actions/checkout@v2
        with:
           fetch-depth: 1
      - name: Build
        run: |
          ./regen.sh
          ./configure FC=${FC} CC=${CC} MPIFC=mpiifort
          make FCFLAGS="-O2 -stand f08" -j$(nproc)

 
