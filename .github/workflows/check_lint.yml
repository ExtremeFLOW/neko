name: Linting

# Controls when the action will run.
on:
  workflow_call:

jobs:
  lint-develop:
    name: "Lint develop branch"
    runs-on: ubuntu-20.04
    outputs:
      develop_score: ${{ steps.check-lint.outputs.develop_score }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          ref: develop

      - name: Setup env.
        run: |
          sudo apt-get update
          sudo apt-get install -yq bc python3-dev python3-pip python3-tk
          pip install nobvisual==0.2.0 flinter==0.4.0

      - name: Lint repository
        run: |
          flint score src/ -d 10 -r flinter_rc.yml | tee flint.txt

      - name: Save the score
        id: check-lint
        run: |
          score=$(awk '$1==0{print $3}' flint.txt)

          if [ -z "$score" ]; then
            echo "No score found, check flint.txt"
            exit 1
          fi
          echo "Develop score=$score"
          echo "develop_score=$score" >> $GITHUB_OUTPUT

  lint-current:
    name: "Lint current branch"
    runs-on: ubuntu-20.04
    outputs:
      current_score: ${{ steps.check-lint.outputs.current_score }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup env.
        run: |
          sudo apt-get update
          sudo apt-get install -yq bc python3-dev python3-pip python3-tk
          pip install nobvisual==0.2.0 flinter==0.4.0

      - name: Lint repository
        run: |
          flint score src/ -d 10 -r flinter_rc.yml | tee flint.txt

      - name: Save the score
        id: check-lint
        run: |
          score=$(awk '$1==0{print $3}' flint.txt)

          if [ -z "$score" ]; then
            echo "No score found, check flint.txt"
            exit 1
          fi
          echo "Current score=$score"
          echo "current_score=$score" >> $GITHUB_OUTPUT


  lint-changed-files:
    name: "Lint changed files"
    runs-on: ubuntu-20.04
    needs:
      - lint-develop
      - lint-current

    steps:
      # Check if the current branch has a lower score than the develop branch.
      # If it does, we will lint the changed files.
      # If it doesn't, we will skip the linting.
      - name: Check environment
        env:
          develop_score: ${{ needs.lint-develop.outputs.develop_score }}
          current_score: ${{ needs.lint-current.outputs.current_score }}
        run: |
          if [ -z "$develop_score" ]; then
            echo "Develop score not set: '$develop_score'" >&2
            exit 1
          fi
          if [ -z "$current_score" ]; then
            echo "Current score not set: '$current_score'" >&2
            exit 1
          fi

          if (($(echo "$current_score < $develop_score" | bc -l))); then
            echo "Current score is lower than develop score, linting changed files."
          else
            echo "Current score is higher than develop score, skipping linting."
            exit 0
          fi

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup env.
        run: |
          sudo apt-get update
          sudo apt-get install -yq bc python3-dev python3-pip python3-tk
          pip install flinter nobvisual

        # Get a list of the changed files and store them for later use.
      - name: Get changed files
        id: get-changed-files
        env:
          target: ${{ github.event.pull_request.base.ref }}
          current: ${{ github.event.pull_request.head.ref }}
        run: |
          if [ -z "$target" ]; then
            target="develop"
          fi
          if [ -z "$current" ]; then
            current="HEAD"
          fi

          git fetch --unshallow origin $target
          changes=($(git diff --name-only --diff-filter=d origin/$target))

          printf "Detected fortran changes:\n"
          for file in ${changes[@]}; do
            if [[ ${file: -4} != ".f90" && ${file: -4} != ".F90" ]]; then
              continue
            fi
            printf "\t- $file"
          done

          echo "changed-files=${changes[@]}" >> $GITHUB_OUTPUT

      - name: Lint changed files
        id: lint-changed-files
        env:
          changed_files: ${{ steps.get-changed-files.outputs.changed-files }}
        run: |
          if [ -z "$changed_files" ]; then
            echo "No fortran files changed"
            exit 0
          fi

          fails=()
          printf "Linting files:\n"
          for file in $changed_files; do

            # If the file is not a Fortran file, skip it.
            if [[ ${file: -4} != ".f90" && ${file: -4} != ".F90" ]]; then
              continue
            fi

            printf "\t- $file"
            score=$(flint score -r flinter_rc.yml $(realpath $file) 2> /dev/null |
                  grep -oP '(?<=\>\|)[^\|\<]+(?=\|\<)')
            printf ": $score\n"

            if (($(echo "$score < 10" | bc -l))); then
                fails+=($file)
            fi
          done

          echo "failed-files=${fails[@]}" >> $GITHUB_OUTPUT

      - name: Print failed files and their errors
        if: ${{ steps.lint-changed-files.outputs.failed-files != '' }}
        env:
          failed_files: ${{ steps.lint-changed-files.outputs.failed-files }}
        run: |
          printf "Files that failed linting:\n"
          printf "\t${failed_files[@]}\n"

          if [ ${#failed_files[@]} -gt 0 ]; then
            for fail in ${failed_files[@]}; do
              printf "%.s-" {1..80} && printf "\n"
              printf "Linting failed for \n\t$fail\n\n"

              report=$(flint lint -r flinter_rc.yml $fail)
              if [ -z "$report" ]; then
                report=$(flint stats -r flinter_rc.yml $fail)
              fi
              echo "$report"
            done
            exit 2
          fi

