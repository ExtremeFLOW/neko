name: CI

# Controls when the action will run.
on:
  pull_request:
    branches: [master]
  workflow_dispatch:

jobs:
  linting:
    name: Flint
    needs: is_draft
    uses: ./.github/workflows/check_lint.yml
    with:
      global_minimum_score: ${{ vars.FLINT_GLOBAL_MINIMUM }}
      changed_files_minimum_score: ${{ vars.FLINT_CHANGED_FILES_MINIMUM }}

  GNU:
    needs:
      - is_draft
      - linting
    uses: ./.github/workflows/check_gnu.yml
    with:
      json-fortran-version: ${{ vars.JSON_FORTRAN_VERSION }}
      pfunit-version: ${{ vars.PFUNIT_VERSION }}

  Intel:
    needs:
      - is_draft
      - linting
    uses: ./.github/workflows/check_intel.yml
    with:
      json-fortran-version: ${{ vars.JSON_FORTRAN_VERSION }}

  NVIDIA:
    needs:
      - is_draft
      - linting
    uses: ./.github/workflows/check_nvidia.yml
    with:
      json-fortran-version: ${{ vars.JSON_FORTRAN_VERSION }}

  ReFrame:
    needs:
      - is_draft
      - linting
      - GNU
    uses: ./.github/workflows/check_reframe.yml
    with:
      json-fortran-version: ${{ vars.JSON_FORTRAN_VERSION }}

  documentation:
    needs: [Intel, GNU, NVIDIA, ReFrame]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Setup env.
        run: |
          sudo apt-get update && sudo apt-get install -y git openmpi-bin libopenmpi-dev autoconf automake autotools-dev libopenblas-dev make git m4 python3 doxygen fonts-freefont-ttf graphviz
          git clone https://github.com/ExtremeFLOW/doxygen-awesome-css doc/doxygen-awesome-css

      - name: Get JSON-Fortran
        id: get-json-fortran
        uses: ./.github/actions/setup_json-fortran
        with:
          version: ${{ inputs.json-fortran-version }}
          os: ${{ matrix.os }}
          compiler: ${{ matrix.compiler }}

      - name: Add JSON-Fortran to environment
        env:
          JSON_FORTRAN_DIR: ${{ steps.get-json-fortran.outputs.install-dir }}
        run: |
          echo "PKG_CONFIG_PATH=${PKG_CONFIG_PATH}:$JSON_FORTRAN_DIR/lib/pkgconfig/" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:$JSON_FORTRAN_DIR/lib/" >> $GITHUB_ENV

      - name: Doxygen
        run: |
          ./regen.sh
          ./configure FC=${FC}
          make html

      # Deploy the HTML documentation to GitHub Pages
      - name: GH Pages Deployment
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./doc/html/
          allow_empty_commit: false
          force_orphan: true
          publish_branch: gh-pages
          destination_dir: docs/release
          keep_files: true
          enable_jekyll: true

  check_complete:
    name: Main PR Ready
    if: ${{ always() }}
    needs:
      - is_draft
      - linting
      - GNU
      - Intel
      - NVIDIA
      - ReFrame
      - documentation

    runs-on: ubuntu-latest
    env:
      draft_status: ${{ needs.is_draft.result }}
      flint_status: ${{ needs.linting.result }}
      gnu_status: ${{ needs.GNU.result }}
      inel_status: ${{ needs.Intel.result }}
      nvidia_status: ${{ needs.NVIDIA.result }}
      reframe_status: ${{ needs.ReFrame.result }}
      doc_status: ${{ needs.documentation.result }}

    steps:
      - name: All checks passed
        run: |
          success=true
          fail=()
          if [ "$draft_status" != "success" ]; then
            fail+=("\t- Draft check: $draft_status")
            success=false
          fi
          if [ "$flint_status" != "success" ]; then
            fail+=("\t- Linting check: $flint_status")
            success=false
          fi
          if [ "$gnu_status" != "success" ]; then
            fail+=("\t- GNU check: $gnu_status")
            success=false
          fi
          if [ "$inel_status" != "success" ]; then
            fail+=("\t- Intel check: $inel_status")
            success=false
          fi
          if [ "$nvidia_status" != "success" ]; then
            fail+=("\t- NVIDIA check: $nvidia_status")
            success=false
          fi
          if [ "$reframe_status" != "success" ]; then
            fail+=("\t- ReFrame check: $reframe_status")
            success=false
          fi
          if [ "$doc_status" != "success" ]; then
            fail+=("\t- Documentation check: $doc_status")
            success=false
          fi

          if [ "$success" = false ]; then
            >&2 echo "The following checks failed:"
            for i in "${fail[@]}"; do
              >&2 printf "$i\n"
            done
            exit 1
          fi
          echo "All checks passed"
