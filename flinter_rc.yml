# Flinter configuration file.

# These are all the regexp rules

# Set active to false is you want to skip the rule.
# All are regexp rules, meaning you can add new rules simply by editing this
# file test your rule on https://regex101.com/ if needed
regexp-rules:
  line-too-long:
    message: Line too long
    regexp: "(?<=^)(.{{80}}.+)"
    replacement: null
    active: true

  missing-spaces-on-do:
    message: Missing spaces
    regexp: do (\w+)=(\S+),(\S+)
    replacement: do \1 = \2, \3
    active: true

  missing-spaces-around-operator:
    message: Missing spaces around operator
    regexp: (\w|\))({operators})(\w|\()
    replacement: \1 \2 \3
    active: true

  missing-spaces-before-operator:
    message: Missing space before operator
    regexp: (\w|\))({operators})
    replacement: \1 \2
    active: true

  missing-spaces-after-operator:
    message: Missing space after operator
    regexp: ({operators})(\w|\()
    replacement: \1 \2
    active: true

  missing-spaces-before-separator:
    message: Missing space before separator
    regexp: '(?<!_t|.\s)(::)'
    replacement: '\1 ::'
    active: true

  missing-spaces-after-separator:
    message: Missing space after separator
    regexp: (?<!_t)(::)(?!\s)
    replacement: ':: \1'
    active: true

  # Look through the list of punctuation, but skip if inside format string '()'
  # However, we do allow a single letter variable or 2 digit number to be used
  # without spaces.
  missing-spaces-after-punctuation:
    message: Missing space after punctuation
    regexp: (?<!'\()(,)([a-zA-Z]\w{{1,}}|\d{{3,}})(?!.*\)')
    replacement: \1 \2
    active: true

  missing-space-before-parenthesis:
    message: Missing space before parenthesis
    regexp: ({structs})\(
    replacement: \1 (
    active: true

  prepend-openmp-with-!$:
    message: Should prepend with "!$"
    regexp: ^(\s*)use omp_lib
    replacement: '\1!$ use omp_lib'
    active: true

  tabulation-instead-of-two-spaces:
    message: Should use 2 spaces instead of tabulation
    regexp: \t
    replacement: "  "
    active: true

  double-spacing:
    message: Double spacing
    regexp: \S+\s{{2,}}\S+
    replacement: \n
    active: false

  use-new-syntax-type:
    message: Use new syntax TYPE(kind)
    regexp: ({types})\*(\w+)
    replacement: \1(\2)
    active: true

  # Exception: Â´!` is allowed at the end of a string.
  one-space-before-comment:
    message: At least one space before comment
    regexp: (\S+)\!(?!'|")
    replacement: \1 !
    active: true

  one-space-after-comment:
    message: Exactly one space after comment
    regexp: (\!)(?![\!\'])(\S+)
    replacement: '\1 \2'
    active: true

  useless-eol-semicolon:
    message: Useless ";" at end of line
    regexp: ;\s*$
    replacement: \n
    active: true

  nospace-endif:
    message: Missing space after `end'
    regexp: \#endif
    replacement: null
    active: false

  nospace-end:
    message: Missing space after `end'
    regexp: (?<!\#)end(if|do|subroutine|function)
    replacement: end \1
    active: true

  missing-spaces-around-=:
    message: Missing spaces around "="
    regexp: (?<!(\(kind|.\(len)|...\'d|...\'n)=(\w|\(|\.|\+|-|\'|")
    replacement: ' = \2'
    active: true

  trailing-white-spaces:
    message: Trailing white-spaces
    regexp: (\w\s+)$
    replacement: ""
    active: true

  recommended-use-of-sp-dp:
    message: You should use "sp" or "dp" instead
    regexp: \(kind\s*=\s*\d\s*\)
    replacement: null
    active: true

  recommended-use-of-brackets:
    message: You should use "[]" instead
    regexp: \(\\([^\)]*)\\\)
    replacement: '[\1]'
    active: true

  recommended-use-mpi_f08:
    message: Should use `use mpi_f08` instead (or `use mpi` if not available)
    regexp: include ["\']mpif.h[\'"]
    replacement: null
    active: true

  not-recommended-bare-end:
    message: Bare end statement not recommended
    regexp: \s^end$
    replacement: null
    active: true

  not-recommended-bare-stop:
    message: Bare stop statement not recommended
    regexp: \s^stop$
    replacement: null
    active: true

  not-recommended-use-exit:
    message: exit is an extension and should be avoided
    regexp: ^exit$
    replacement: null
    active: true

  not-recommended-use-goto:
    message: goto is hard to maintain, prone to spaghetti code.
    regexp: ^goto.*$
    replacement: null
    active: true

  not-recommended-use-double-precision:
    message: double precision is discouraged; use real instead.
    regexp: ^double precision.*$
    replacement: null
    active: true

  not-recommended-use-pause:
    message: pause is discouraged.
    regexp: ^pause.*$
    replacement: null
    active: true

  not-recommended-use-include:
    message: include is discouraged, prefer use.
    regexp: ^include.*$
    replacement: null
    active: true

# These are rules that span over multiple lines, not accessible by regexp
# You you want to edit these rules or add your own, two options:
# - ask us.
# - fork the code.
structure-rules:
  file-line-length: 80
  file-line-number: 2000
  max-statements-in-context: 800 # Subroutine of function
  max-declared-locals: 35
  min-varlen: 1
  max-varlen: 30
  max-arguments: 20
  min-arglen: 1
  max-arglen: 70
  max-nesting-levels: 8

# These are the fortran syntax we use to parse the source
# A priori there is no need to edit, but Fortran is so vast in time...
fortran-syntax:
  types:
    - real
    - character
    - logical
    - integer
    - complex
    - double precision

  operators:
    - '\.eq\.'
    - "=="
    - '\.neq\.'
    - "/="
    - '\.gt\.'
    - ">"
    - '\.lt\.'
    - "<"
    - '\.geq\.'
    - ">="
    - '\.leq\.'
    - "<="
    - '\.le\.'
    - '\.ge\.'
    - '\.and\.'
    - '\.or\.'

  structs:
    - "if"
    - "select"
    - "case"
    - "while"
    - "is"
    - "select type"

  punctuations:
    - ","
    - '\)'
    - ";"

  blocks:
    - "program"
    - "subroutine"
    - "module"
    - "function"
    - "blockdata"
