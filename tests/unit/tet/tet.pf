@test
subroutine test_tet_init
  use pfunit
  use point
  use tet
  use num_types
  implicit none
  type(point_t) :: p1, p2, p3, p4
  integer :: point_id
  real(kind=dp), parameter :: c1(3) = (/0d0, 0d0, 0d0/)
  real(kind=dp), parameter :: c2(3) = (/1d0, 0d0, 0d0/)
  real(kind=dp), parameter :: c3(3) = (/0d0, 1d0, 0d0/)
  real(kind=dp), parameter :: c4(3) = (/0d0, 0d0, 1d0/)
  type(tet_t) :: t
  integer :: i, id

  id = 1
  p1 = point_t(c1, id)

  id = 2
  p2 = point_t(c2, id)

  id = 3
  p3 = point_t(c3, id)

  id = 4
  p4 = point_t(c4, id)
  

  id = 42
  call t%init(id, p1, p2, p3, p4)
  @assertEqual(t%id(), id)
  @assertEqual(t%gdim(), NEKO_TET_GDIM)
  @assertEqual(t%npts(), NEKO_TET_NPTS)

  @assertTrue(t%p(1) .eq. p1)
  @assertTrue(t%p(2) .eq. p2)
  @assertTrue(t%p(3) .eq. p3)
  @assertTrue(t%p(4) .eq. p4)


end subroutine test_tet_init

@test
subroutine test_tet_free
  use pfunit
  use point
  use tet
  use num_types
  implicit none
  type(point_t) :: p1, p2, p3, p4
  integer :: point_id
  real(kind=dp), parameter :: c1(3) = (/0d0, 0d0, 0d0/)
  real(kind=dp), parameter :: c2(3) = (/1d0, 0d0, 0d0/)
  real(kind=dp), parameter :: c3(3) = (/0d0, 1d0, 0d0/)
  real(kind=dp), parameter :: c4(3) = (/0d0, 0d0, 1d0/)
  type(tet_t) :: t
  integer :: i, id

  id = 1
  p1 = point_t(c1, id)

  id = 2
  p2 = point_t(c2, id)

  id = 3
  p3 = point_t(c3, id)

  id = 4
  p4 = point_t(c4, id)
  
  id = 42
  call t%init(id, p1, p2, p3, p4)
  call t%free()

end subroutine test_tet_free

@test
subroutine test_tet_centroid
  use pfunit
  use point
  use tet
  use num_types
  implicit none
  type(point_t) :: p1, p2, p3, p4
  integer :: point_id
  real(kind=dp), parameter :: c1(3) = (/0d0, 0d0, 0d0/)
  real(kind=dp), parameter :: c2(3) = (/1d0, 0d0, 0d0/)
  real(kind=dp), parameter :: c3(3) = (/0d0, 1d0, 0d0/)
  real(kind=dp), parameter :: c4(3) = (/0d0, 0d0, 1d0/)
  real(kind=dp), parameter :: center(3) = (/0.25d0, 0.25d0, 0.25d0/)
  type(tet_t) :: t
  type(point_t) :: centroid
  integer :: i, id

  p1 = point_t(c1)
  p2 = point_t(c2)
  p3 = point_t(c3)
  p4 = point_t(c4)
  id = 42
  call t%init(id, p1, p2, p3, p4)

  centroid = t%centroid()
  do i = 1, 3
     @assertEqual(centroid%x(i), center(i))
  end do

end subroutine test_tet_centroid

@test
subroutine test_tet_diameter
  use pfunit
  use point
  use tet
  use num_types
  implicit none
  type(point_t) :: p1, p2, p3, p4
  integer :: point_id
  real(kind=dp), parameter :: c1(3) = (/0d0, 0d0, 0d0/)
  real(kind=dp), parameter :: c2(3) = (/1d0, 0d0, 0d0/)
  real(kind=dp), parameter :: c3(3) = (/0d0, 1d0, 0d0/)
  real(kind=dp), parameter :: c4(3) = (/0d0, 0d0, 1d0/)
  type(tet_t) :: t
  integer :: i, id

  p1 = point_t(c1)
  p2 = point_t(c2)
  p3 = point_t(c3)
  p4 = point_t(c4)
  id = 42
  call t%init(id, p1, p2, p3, p4)

  @assertEqual(t%diameter(), 1.414213562373095d0, tolerance=1d-14)
  
end subroutine test_tet_diameter

@test
subroutine test_tet_equal
  use pfunit
  use point
  use tet
  use num_types
  implicit none
  type(point_t) :: p1, p2, p3, p4, p5, p6, p7, p8
  integer :: point_id
  real(kind=dp), parameter :: c1(3) = (/0d0, 0d0, 0d0/)
  real(kind=dp), parameter :: c2(3) = (/1d0, 0d0, 0d0/)
  real(kind=dp), parameter :: c3(3) = (/0d0, 1d0, 0d0/)
  real(kind=dp), parameter :: c4(3) = (/0d0, 0d0, 1d0/)
  real(kind=dp), parameter :: d1(3) = (/-1d0, -1d0, -1d0/)
  real(kind=dp), parameter :: d2(3) = (/1d0, -1d0, -1d0/)
  real(kind=dp), parameter :: d3(3) = (/-1d0, 1d0, -1d0/)
  real(kind=dp), parameter :: d4(3) = (/-1d0, -1d0, -2d0/)
  type(tet_t) :: t1, t2, t3
  integer :: i, id

  p1 = point_t(c1)
  p2 = point_t(c2)
  p3 = point_t(c3)
  p4 = point_t(c4)
  id = 42
  call t1%init(id, p1, p2, p3, p4)

  id = 4711
  call t2%init(id, p1, p2, p3, p4)

  @assertTrue(t1 .eq. t2)
  @assertFalse(t1%id() .eq. t2%id())

  p5 = point_t(d1)
  p6 = point_t(d2)
  p7 = point_t(d3)
  p8 = point_t(d4)
  id = 44
  call t3%init(id, p5, p6, p7, p8)
  @assertFalse(t1 .eq. t3)

  p5 = point_t(c1)
  p6 = point_t(c2)
  p7 = point_t(c3)
  p8 = point_t(c4)
  @assertTrue(t1 .eq. t3)
  
end subroutine test_tet_equal

@test
subroutine test_tet_facet_id
  use pfunit
  use point
  use tet
  use tuple
  use num_types
  implicit none
  type(point_t) :: p1, p2, p3, p4
  integer :: point_id
  real(kind=dp), parameter :: c1(3) = (/0d0, 0d0, 0d0/)
  real(kind=dp), parameter :: c2(3) = (/1d0, 0d0, 0d0/)
  real(kind=dp), parameter :: c3(3) = (/0d0, 1d0, 0d0/)
  real(kind=dp), parameter :: c4(3) = (/0d0, 0d0, 1d0/)
  type(tet_t) :: tr
  integer :: i, id
  type(tuple3_i4_t) :: t

  id = 1
  p1 = point_t(c1, id)

  id = 2
  p2 = point_t(c2, id)

  id = 3
  p3 = point_t(c3, id)

  id = 4
  p4 = point_t(c4, id)
  
  id = 42
  call tr%init(id, p1, p2, p3, p4)

  call tr%facet_id(t, 1)
  @assertEqual(t%x(1), p1%id())
  @assertEqual(t%x(2), p3%id())
  @assertEqual(t%x(3), p4%id())

  call tr%facet_id(t, 2)
  @assertEqual(t%x(1), p2%id())
  @assertEqual(t%x(2), p3%id())
  @assertEqual(t%x(3), p4%id())

  call tr%facet_id(t, 3)
  @assertEqual(t%x(1), p1%id())
  @assertEqual(t%x(2), p2%id())
  @assertEqual(t%x(3), p4%id())

  call tr%facet_id(t, 4)
  @assertEqual(t%x(1), p1%id())
  @assertEqual(t%x(2), p2%id())
  @assertEqual(t%x(3), p3%id())

    
end subroutine test_tet_facet_id
