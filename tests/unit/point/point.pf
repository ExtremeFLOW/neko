@test
subroutine test_point_init
  use pfunit
  use point
  use num_types
  implicit none
  type(point_t) :: p1, p2, p3
  integer :: point_id
  real(kind=dp), parameter :: coords(3) = (/1d0, 2d0, 3d0/)
  integer :: i
  
  p1 = point_t(1d0, 2d0, 3d0)
  p2 = point_t(coords)

  do i = 1, 3
     @assertEqual(p1%x(i), p2%x(i))
  end do
  @assertEqual(p1%id(), -1)
  @assertEqual(p1%id(), p2%id())

  point_id = 42
  call p1%set_id(point_id)
  @assertEqual(p1%id(), point_id)
  @assertFalse(p1%id() .eq. p2%id())

  p2 = point_t(1d0, 2d0, 3d0, point_id)
  do i = 1, 3
     @assertEqual(p1%x(i), p2%x(i))
  end do

  p3 = point_t(coords, point_id)
  do i = 1, 3
     @assertEqual(p3%x(i), p1%x(i))
  end do

end subroutine test_point_init

@test
subroutine test_point_assign
  use pfunit
  use point
  use num_types
  implicit none
  type(point_t) :: p1, p2
  integer :: point_id
  real(kind=dp), parameter :: c1(3) = (/1d0, 2d0, 3d0/)
  real(kind=dp), parameter :: c2(3) = (/4d0, 5d0, 6d0/)
  integer :: i

  p1 = point_t(c1)
  
  point_id = 42
  p2 = point_t(c1, point_id)
  @assertFalse(p1%id() .eq. p2%id())
  do i = 1, 3
     @assertEqual(p1%x(i), p2%x(i))
  end do

  p1 = p2
  @assertTrue(p1%id() .eq. p2%id())
  do i = 1, 3
     @assertEqual(p1%x(i), p2%x(i))
  end do

  p2 = point_t(c2, point_id)
  @assertTrue(p1%id() .eq. p2%id())
  do i = 1, 3
     @assertNotEqual(p1%x(i), p2%x(i))
  end do

  p1 = p2
  @assertTrue(p1%id() .eq. p2%id())
  do i = 1, 3
     @assertEqual(p1%x(i), p2%x(i))
  end do
    
end subroutine test_point_assign

@test
subroutine test_point_eqne
  use pfunit
  use point
  use num_types
  implicit none
  type(point_t) :: p1, p2
  real(kind=dp), parameter :: c1(3) = (/1d0, 2d0, 3d0/)
  real(kind=dp), parameter :: c2(3) = (/4d0, 5d0, 6d0/)

  p1 = point_t(c1)
  p2 = point_t(c2)

  @assertFalse(p1 .eq. p2)
  @assertTrue(p1 .ne. p2)
  
end subroutine test_point_eqne

@test
subroutine test_point_ltgt
  use pfunit
  use point
  use num_types
  implicit none
  type(point_t) :: p1, p2
  real(kind=dp), parameter :: c1(3) = (/1d0, 0d0, 0d0/)
  real(kind=dp), parameter :: c2(3) = (/2d0, 0d0, 0d0/)
  real(kind=dp), parameter :: c3(3) = (/-2d0, -2d0, -2d0/)
  real(kind=dp), parameter :: c4(3) = (/2d0, 2d0, 2d0/)

  p1 = point_t(c1)
  p2 = point_t(c2)
  @assertTrue(p1 .lt. p2)
  @assertFalse(p1 .gt. p2)
  @assertTrue(p2 .gt. p1)
  
  p1 = point_t(c3)
  p2 = point_t(c4)
  @assertTrue(p1 .lt. p2)
  @assertFalse(p1 .gt. p2)
  @assertTrue(p2 .gt. p1)
  
end subroutine test_point_ltgt
