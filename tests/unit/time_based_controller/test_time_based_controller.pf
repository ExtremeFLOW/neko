!> Test the constructor
@test
subroutine test_init()
  use pfunit
  use time_based_controller, only : time_based_controller_t
  use num_types, only : rp
  implicit none
  
  type(time_based_controller_t) ctrl

  call ctrl%init(1.0_rp, "simulationtime", 10.0_rp)
  @assertEqual(ctrl%end_time, 1.0_rp, tolerance=1e-6_rp)
  @assertEqual(ctrl%time_interval, 10.0_rp, tolerance=1e-6_rp)
  @assertEqual(ctrl%frequency, 0.1_rp, tolerance=1e-6_rp)
  @assertEqual(ctrl%nsteps, 0)

  call ctrl%init(1.0_rp, "nsamples", 10.0_rp)
  @assertEqual(ctrl%end_time, 1.0_rp, tolerance=1e-6_rp)
  @assertEqual(ctrl%time_interval, 0.1_rp, tolerance=1e-6_rp)
  @assertEqual(ctrl%frequency, 10.0_rp, tolerance=1e-6_rp)
  @assertEqual(ctrl%nsteps, 0)

  call ctrl%init(1.0_rp, "tsteps", 10.0_rp)
  @assertEqual(ctrl%end_time, 1.0_rp, tolerance=1e-6_rp)
  @assertEqual(ctrl%time_interval, 0.0_rp, tolerance=1e-6_rp)
  @assertEqual(ctrl%frequency, 0.0_rp, tolerance=1e-6_rp)
  @assertEqual(ctrl%nsteps, 10)
end subroutine test_init

!> Test assignment
@test
subroutine test_assign()
  use pfunit
  use time_based_controller, only : time_based_controller_t
  use num_types, only : rp
  implicit none
  
  type(time_based_controller_t) ctrl1
  type(time_based_controller_t) ctrl2

  call ctrl1%init(1.0_rp, "simulationtime", 10.0_rp)
  ctrl2 = ctrl1
  @assertEqual(ctrl1%end_time, ctrl2%end_time, tolerance=1e-6_rp)
  @assertEqual(ctrl1%time_interval, ctrl2%time_interval, tolerance=1e-6_rp)
  @assertEqual(ctrl1%frequency, ctrl2%frequency, tolerance=1e-6_rp)
  @assertEqual(ctrl1%nsteps, ctrl2%nsteps)
  @assertEqual(ctrl1%nexecutions, ctrl2%nexecutions)

end subroutine test_assign

!> Test check simulationtime
@test
subroutine test_check_simulationtime()
  use pfunit
  use time_based_controller, only : time_based_controller_t
  use num_types, only : rp
  implicit none
  
  type(time_based_controller_t) ctrl

  call ctrl%init(10.0_rp, "simulationtime", 1.0_rp)

  ! Expect true on first execution
  @assertEqual(ctrl%check(0.0_rp, 0), .true.)
  call ctrl%register_execution()

  @assertEqual(ctrl%check(1.1_rp, 0), .true.)
  call ctrl%register_execution()

  @assertEqual(ctrl%check(1.5_rp, 0), .false.)

end subroutine test_check_simulationtime

!> Test check nsamples
@test
subroutine test_check_nsamples()
  use pfunit
  use time_based_controller, only : time_based_controller_t
  use num_types, only : rp
  implicit none
  
  type(time_based_controller_t) ctrl

  call ctrl%init(10.0_rp, "nsamples", 10.0_rp)

  ! Expect true on first execution
  @assertEqual(ctrl%check(0.0_rp, 0), .true.)
  call ctrl%register_execution()

  @assertEqual(ctrl%check(1.1_rp, 0), .true.)
  call ctrl%register_execution()

  @assertEqual(ctrl%check(1.5_rp, 0), .false.)

end subroutine test_check_nsamples

!> Test check tsteps
@test
subroutine test_check_tsteps()
  use pfunit
  use time_based_controller, only : time_based_controller_t
  use num_types, only : rp
  implicit none
  
  type(time_based_controller_t) ctrl

  call ctrl%init(10.0_rp, "tsteps", 10.0_rp)

  ! Expect true on first execution
  @assertEqual(ctrl%check(0.0_rp, 0), .true.)
  call ctrl%register_execution()

  @assertEqual(ctrl%check(0.0_rp, 10), .true.)
  call ctrl%register_execution()

  @assertEqual(ctrl%check(0.0_rp, 15), .false.)

end subroutine test_check_tsteps

!> Test register
@test
subroutine test_register()
  use pfunit
  use time_based_controller, only : time_based_controller_t
  use num_types, only : rp
  implicit none
  
  type(time_based_controller_t) ctrl

  call ctrl%init(1.0_rp, "simulationtime", 10.0_rp)
  call ctrl%register_execution()
  @assertEqual(ctrl%nexecutions, 1)

end subroutine test_register