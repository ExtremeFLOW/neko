module field_parallel
  use mpi
  use pfunit
  use field
  use num_types
  use device
  implicit none

  @TestCase
  type, extends(MPITestCase) :: test_field
   contains
     procedure :: setUp
     procedure :: tearDown
  end type test_field
 
contains

  subroutine setUp(this)
    class(test_field), intent(inout) :: this
    if (NEKO_BCKND_DEVICE .eq. 1) then
       call device_init
    end if
  end subroutine setUp

  subroutine tearDown(this)
    class(test_field), intent(inout) :: this
    if (NEKO_BCKND_DEVICE .eq. 1) then
         call device_finalize
   end if
 end subroutine tearDown

  subroutine test_field_gen_msh(msh)
    type(mesh_t), intent(inout) :: msh
    type(point_t) :: p(12)

    p(1) = point_t(0d0, 0d0, 0d0)
    call p(1)%set_id(1)
    p(2) = point_t(1d0, 0d0, 0d0)
    call p(2)%set_id(2)
    p(3) = point_t(0d0, 1d0, 0d0)
    call p(3)%set_id(4)
    p(4) = point_t(1d0, 1d0, 0d0)
    call p(4)%set_id(3)
    p(5) = point_t(2d0, 0d0, 0d0)
    call p(5)%set_id(5)
    p(6) = point_t(2d0, 1d0, 0d0)
    call p(6)%set_id(6)
    p(7) = point_t(0d0, 0d0, 1d0)
    call p(7)%set_id(7)
    p(8) = point_t(1d0, 0d0, 1d0)
    call p(8)%set_id(8)
    p(9) = point_t(1d0, 1d0, 1d0)
    call p(9)%set_id(9)
    p(10) = point_t(0d0, 1d0, 1d0)
    call p(10)%set_id(10)
    p(11) = point_t(2d0, 0d0, 1d0)
    call p(11)%set_id(11)
    p(12) = point_t(2d0, 1d0, 1d0)
    call p(12)%set_id(12)
  
    call mesh_init(msh, 3, 2)
    call mesh_add_element(msh, 1, p(1), p(2), p(4), p(3), &
         p(7), p(8), p(9), p(10))
    
    call mesh_add_element(msh, 2, p(2), p(5), p(6), p(4), &
         p(8), p(11), p(12), p(9))
    
  end subroutine test_field_gen_msh
  
  @test(npes=[1])
  subroutine test_field_init(this)
    class (test_field), intent(inout) :: this
    type(space_t) :: Xh
    type(mesh_t) :: msh
    type(dofmap_t) :: dm
    integer, parameter :: LX = 4
    type(field_t) :: f_msh_Xh, f_dm
    integer :: ierr

    call MPI_Comm_dup(this%getMpiCommunicator(), NEKO_COMM%mpi_val, ierr)

    call test_field_gen_msh(msh)
    call space_init(Xh, GLL, lx, lx, lx)
    
    call field_init(f_msh_Xh, msh, Xh, 'test')
    @assertTrue(allocated(f_msh_Xh%x))
    @assertTrue(associated(f_msh_Xh%Xh))
    @assertTrue(associated(f_msh_Xh%msh))
    @assertTrue(associated(f_msh_Xh%dof))
    @assertEqual(size(f_msh_Xh%x), 2 * lx**3)
    @assertEqual(maxval(f_msh_Xh%x), 0d0)

    dm = dofmap_t(msh, Xh)
    call field_init(f_dm, msh, Xh, 'test')
    @assertTrue(allocated(f_dm%x))
    @assertTrue(associated(f_dm%Xh))
    @assertTrue(associated(f_dm%msh))
    @assertTrue(associated(f_dm%dof))
    @assertEqual(size(f_dm%x), 2 * lx**3)
    @assertEqual(maxval(f_dm%x), 0d0)

  end subroutine test_field_init

  @test(npes=[1])
  subroutine test_field_free(this)
    class (test_field), intent(inout) :: this
    type(space_t) :: Xh
    type(mesh_t) :: msh
    integer, parameter :: LX = 4
    type(field_t) :: f
    integer :: ierr
    
    call MPI_Comm_dup(this%getMpiCommunicator(), NEKO_COMM%mpi_val, ierr)

    call test_field_gen_msh(msh)
    call space_init(Xh, GLL, lx, lx, lx)
    
    call field_init(f, msh, Xh, 'test')
    call field_free(f)
    @assertFalse(allocated(f%x))
        
  end subroutine test_field_free


  @test(npes=[1])
  subroutine test_field_assign_scalar(this)
    class (test_field), intent(inout) :: this
    type(space_t) :: Xh
    type(mesh_t) :: msh
    integer, parameter :: LX = 4
    type(field_t) :: f
    integer :: ierr

    call MPI_Comm_dup(this%getMpiCommunicator(), NEKO_COMM%mpi_val, ierr)

    call test_field_gen_msh(msh)
    call space_init(Xh, GLL, lx, lx, lx)
    
    call field_init(f, msh, Xh, 'test')
    @assertEqual(maxval(f%x), 0d0)

    f = 42.0_rp
    if (NEKO_BCKND_DEVICE .eq. 1) then
       call device_memcpy(f%x, f%x_d, size(f%x), DEVICE_TO_HOST)
    end if          
    @assertEqual(maxval(f%x), 42.0_rp)
    
  end subroutine test_field_assign_scalar


  @test(npes=[1])
  subroutine test_field_assign_field(this)
    class (test_field), intent(inout) :: this
    type(space_t) :: Xh
    type(mesh_t) :: msh
    integer, parameter :: LX = 4
    type(field_t) :: f, g
    integer :: ierr

    call MPI_Comm_dup(this%getMpiCommunicator(), NEKO_COMM%mpi_val, ierr)

    call test_field_gen_msh(msh)
    call space_init(Xh, GLL, lx, lx, lx)
    
    call field_init(f, msh, Xh, 'test')
    call field_init(g, msh, Xh, 'test')

    f = 42.0_rp
    if (NEKO_BCKND_DEVICE .eq. 1) then
       call device_memcpy(f%x, f%x_d, size(f%x), DEVICE_TO_HOST)
    end if          
    g = f
    if (NEKO_BCKND_DEVICE .eq. 1) then
       call device_memcpy(g%x, g%x_d, size(f%x), DEVICE_TO_HOST)
    end if          
    @assertEqual(maxval(g%x), maxval(f%x))
    
  end subroutine test_field_assign_field


  @test(npes=[1])
  subroutine test_field_add_scalar(this)
    class (test_field), intent(inout) :: this
    type(space_t) :: Xh
    type(mesh_t) :: msh
    integer, parameter :: LX = 4
    real(kind=rp) :: a
    type(field_t) :: f
    integer :: ierr

    call MPI_Comm_dup(this%getMpiCommunicator(), NEKO_COMM%mpi_val, ierr)

    call test_field_gen_msh(msh)
    call space_init(Xh, GLL, lx, lx, lx)
    
    call field_init(f, msh, Xh, 'test')

    f = 42.0_rp
    a = 17.0_rp
    call field_add(f, a)
    if (NEKO_BCKND_DEVICE .eq. 1) then
       call device_memcpy(f%x, f%x_d, size(f%x), DEVICE_TO_HOST)
    end if
    @assertEqual(maxval(f%x), 42.0_rp + a)
    
  end subroutine test_field_add_scalar


  @test(npes=[1])
  subroutine test_field_add_field(this)
    class (test_field), intent(inout) :: this
    type(space_t) :: Xh
    type(mesh_t) :: msh
    integer, parameter :: LX = 4
    type(field_t) :: f, g
    integer :: ierr

    call MPI_Comm_dup(this%getMpiCommunicator(), NEKO_COMM%mpi_val, ierr)

    call test_field_gen_msh(msh)
    call space_init(Xh, GLL, lx, lx, lx)
    
    call field_init(f, msh, Xh, 'test')
    call field_init(g, msh, Xh, 'test')

    f = 42.0_rp
    g = 17.0_rp
    call field_add(f, g)
    if (NEKO_BCKND_DEVICE .eq. 1) then
       call device_memcpy(f%x, f%x_d, size(f%x), DEVICE_TO_HOST)
    end if
    @assertEqual(maxval(f%x), 42.0_rp + 17.0_rp)
    
  end subroutine test_field_add_field

end module field_parallel
