module math_parallel
  use mpi
  use pfunit
  use math
  use num_types
  implicit none

contains

  @test
  subroutine test_math_abscmp
    real(kind=rp) :: a, b, c, d

    a = 17.0d0
    b = 42.0d0
    c = 42.0d0 + (NEKO_EPS/2d0)
    d = 42.0d0 + 1d-12

    @assertFalse(abscmp(a, b))
    @assertTrue(abscmp(b, c))
    @assertFalse(abscmp(b, d))
    
  end subroutine test_math_abscmp

  @test
  subroutine test_math_rzero
    integer, parameter :: n = 17
    real(kind=rp) :: a(n)
    integer :: i

    a = 1d0  
    call rzero(a, n)
    do i = 1, n
       @assertEqual(0d0, a(i))
    end do

    do i = 1, n
       a(i) = dble(i)
    end do
    call rzero(a, n)
    do i = 1, n
       @assertEqual(0d0, a(i))
    end do
    
  end subroutine test_math_rzero

  @test
  subroutine test_math_izero
    integer, parameter :: n = 17
    integer :: a(n)
    integer :: i

    a = 17
    call izero(a, n)
    do i = 1, n
       @assertEqual(0, a(i))
    end do
    
  end subroutine test_math_izero

  @test
  subroutine test_math_rone
    integer, parameter :: n = 17
    real(kind=rp) :: a(n)
    integer :: i

    call rzero(a, n)
    do i = 1, n
       @assertEqual(0d0, a(i))
    end do
    call rone(a, n)
    do i = 1, n
       @assertEqual(1d0, a(i))
    end do
    
  end subroutine test_math_rone

  @test
  subroutine test_math_copy
    integer, parameter :: n = 17
    real(kind=rp) :: a(n), b(n)
    integer :: i

    call rone(a, n)
    call rzero(b, n)
    do i = 1, n
       @assertNotEqual(a(i), b(i))
    end do

    call copy(b, a, n)
    do i = 1, n
       @assertEqual(a(i), b(i))
    end do
    
  end subroutine test_math_copy

  @test
  subroutine test_math_cadd
    integer, parameter :: n = 17
    real(kind=rp) :: a(n)
    real(kind=rp), parameter :: s = 42
    integer :: i

    call rone(a, n)
    call cadd(a, s, n)

    do i = 1, n
       @assertEqual(43d0, a(i))
    end do

  end subroutine test_math_cadd

  @test
  subroutine test_math_vcross
    integer, parameter :: n = 17
    real(kind=rp), dimension(n) :: u1, u2, u3, v1, v2, v3, w1, w2, w3
    real(kind=rp), parameter :: s = 42
    integer :: i

    call rzero(u1, n)
    call rzero(u2, n)
    call rzero(u3, n)

    do i = 1, n
       v1(i) = 1d0
       v2(i) = 4d0
       v3(i) = -1d0

       w1(i) = 2d0
       w2(i) = -4d0
       w3(i) = 6d0
    end do

    call vcross(u1, u2, u3, v1, v2, v3, w1, w2, w3, n)

    do i = 1, n
       @assertEqual(20d0, u1(i))
       @assertEqual(-8d0, u2(i))
       @assertEqual(-12d0, u3(i))
    end do

  end subroutine test_math_vcross

  @test
  subroutine test_math_vdot2
    integer, parameter :: n = 17
    real(kind=rp), dimension(n) :: dot, v1, v2, w1, w2
    integer :: i

    call rzero(dot, n)

    do i = 1, n
       v1(i) = 1d0
       v2(i) = 4d0

       w1(i) = 4d0
       w2(i) = 1d0
    end do

    call vdot2(dot, v1, v2, w1, w2, n)

    do i = 1, n
       @assertEqual(8, dot(i))
    end do

  end subroutine test_math_vdot2


  @test
  subroutine test_math_vdot3
    implicit none
    integer, parameter :: n = 17
    real(kind=rp), dimension(n) :: dot, v1, v2, v3, w1, w2, w3
    integer :: i

    call rzero(dot, n)

    do i = 1, n
       v1(i) = 1d0
       v2(i) = 4d0
       v3(i) = 1d0

       w1(i) = 4d0
       w2(i) = 1d0
       w3(i) = -1d0
    end do

    call vdot3(dot, v1, v2, v3, w1, w2, w3, n)

    do i = 1, n
       @assertEqual(7, dot(i))
    end do

  end subroutine test_math_vdot3

  @test
  subroutine test_math_add2
    integer, parameter :: n = 17
    real(kind=rp), dimension(n) :: dot, a, b
    integer :: i

    do i = 1, n
       a(i) = 14d0
       b(i) = 3d0
    end do

    call add2(a, b, n)

    do i = 1, n
       @assertEqual(17, a(i))
    end do

  end subroutine test_math_add2

  @test
  subroutine test_math_add3
    integer, parameter :: n = 17
    real(kind=rp), dimension(n) :: dot, a, b, c
    integer :: i

    do i = 1, n
       a(i) = 14d0
       b(i) = 3d0
       c(i) = 0d0
    end do

    call add3(c, a, b, n)

    do i = 1, n
       @assertEqual(17, c(i))
    end do

  end subroutine test_math_add3

  @test
  subroutine test_math_add4
    integer, parameter :: n = 17
    real(kind=rp), dimension(n) :: dot, a, b, c, d
    integer :: i


    do i = 1, n
       a(i) = 14d0
       b(i) = 3d0
       c(i) = 25d0
       d(i) = 0d0
    end do

    call add4(d, a, b, c, n)

    do i = 1, n
       @assertEqual(42, d(i))
    end do

  end subroutine test_math_add4

  @test
  subroutine test_math_add2s1
    integer, parameter :: n = 17
    real(kind=rp), dimension(n) :: a, b
    real(kind=rp), parameter :: c1 = 2d0
    integer :: i

    do i = 1, n
       a(i) = 20d0
       b(i) = 2d0
    end do

    call add2s1(a, b, c1, n)

    do i = 1, n
       @assertEqual(42, a(i))
    end do

  end subroutine test_math_add2s1

  @test
  subroutine test_math_add2s2
    integer, parameter :: n = 17
    real(kind=rp), dimension(n) :: a, b
    real(kind=rp), parameter :: c1 = 2d0
    integer :: i

    do i = 1, n
       a(i) = 20d0
       b(i) = 2d0
    end do

    call add2s2(a, b, c1, n)

    do i = 1, n
       @assertEqual(24, a(i))
    end do

  end subroutine test_math_add2s2

  @test
  subroutine test_math_col2
    integer, parameter :: n = 17
    real(kind=rp), dimension(n) :: a, b
    integer :: i

    do i = 1, n
       a(i) = 21d0
       b(i) = 2d0
    end do

    call col2(a, b, n)

    do i = 1, n
       @assertEqual(42, a(i))
    end do

  end subroutine test_math_col2

  @test(npes=[1,2])
  subroutine test_math_glsc3(this)
    class (MpiTestMethod), intent(inout) :: this
    integer, parameter :: n = 17
    real(kind=rp), dimension(n) :: a, b, c
    real(kind=rp) :: res, expected
    integer :: i, ierr

    call MPI_Comm_dup(this%getMpiCommunicator(), NEKO_COMM%mpi_val, ierr)
    
    do i = 1, n
       a(i) = 1d0
       b(i) = 1d0
       c(i) = 1d0
    end do

    expected = this%getNumProcesses() * 17d0
    res = glsc3(a, b, c, n)
    @assertEqual(expected, res)
    @MPIassertEqual(expected, res)

  end subroutine test_math_glsc3

end module math_parallel
