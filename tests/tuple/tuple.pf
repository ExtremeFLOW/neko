@test
subroutine test_tuple_i4
  use pfunit
  use tuple
  implicit none
  type(tuple_i4_t) :: t1, t2
  integer :: i
  integer :: x(2) = (/2, 2/)
  t1 = (/1, 2/)
  t2 = (/1, 2/)

  do i = 1, 2
     @assertEqual(t1%x(i), t2%x(i))
  end do
  @assertTrue(t1 .eq. t2)

  t2 = (/2, 2/)
  @assertFalse(t1 .eq. t2)

  t1 = x
  @assertTrue(t1 .eq. t2)

  t2 = (/2, 3/)
  @assertFalse(t1 .eq. t2)

  t1 = t2
  @assertTrue(t1 .eq. t2)

end subroutine test_tuple_i4

@test
subroutine test_tuple3_i4
  use pfunit
  use tuple
  implicit none
  type(tuple3_i4_t) :: t1, t2
  integer :: i
  integer :: x(3) = (/2, 2, 2/)
  t1 = (/1, 2, 3/)
  t2 = (/1, 2, 3/)

  do i = 1, 3
     @assertEqual(t1%x(i), t2%x(i))
  end do
  @assertTrue(t1 .eq. t2)

  t2 = (/2, 2, 2/)
  @assertFalse(t1 .eq. t2)

  t1 = x
  @assertTrue(t1 .eq. t2)

  t2 = (/2, 3, 4/)
  @assertFalse(t1 .eq. t2)

  t1 = t2
  @assertTrue(t1 .eq. t2)

end subroutine test_tuple3_i4

@test
subroutine test_tuple4_i4
  use pfunit
  use tuple
  implicit none
  type(tuple4_i4_t) :: t1, t2
  integer :: i
  integer :: x(4) = (/2, 2, 2, 2/)
  t1 = (/1, 2, 3, 4/)
  t2 = (/1, 2, 3, 4/)

  do i = 1, 4
     @assertEqual(t1%x(i), t2%x(i))
  end do
  @assertTrue(t1 .eq. t2)

  t2 = (/2, 2, 2, 2/)
  @assertFalse(t1 .eq. t2)

  t1 = x
  @assertTrue(t1 .eq. t2)

  t2 = (/2, 3, 4, 5/)
  @assertFalse(t1 .eq. t2)

  t1 = t2
  @assertTrue(t1 .eq. t2)

end subroutine test_tuple4_i4

@test
subroutine test_tuple_i8
  use pfunit
  use num_types, only : i8
  use tuple
  implicit none
  type(tuple_i8_t) :: t1, t2
  integer :: i
  integer(i8) :: x(2) = (/2_i8, 2_i8/)
  t1 = (/1_i8, 2_i8/)
  t2 = (/1_i8, 2_i8/)

  do i = 1, 2
     @assertEqual(t1%x(i), t2%x(i))
  end do
  @assertTrue(t1 .eq. t2)

  t2 = (/2_i8, 2_i8/)
  @assertFalse(t1 .eq. t2)

  t1 = x
  @assertTrue(t1 .eq. t2)

  t2 = (/2_i8, 3_i8/)
  @assertFalse(t1 .eq. t2)

  t1 = t2
  @assertTrue(t1 .eq. t2)

end subroutine test_tuple_i8

@test
subroutine test_tuple3_i8
  use pfunit
  use num_types, only : i8
  use tuple
  implicit none
  type(tuple3_i8_t) :: t1, t2
  integer :: i
  integer(i8) :: x(3) = (/2_i8, 2_i8, 2_i8/)
  t1 = (/1_i8, 2_i8, 3_i8/)
  t2 = (/1_i8, 2_i8, 3_i8/)

  do i = 1, 3
     @assertEqual(t1%x(i), t2%x(i))
  end do
  @assertTrue(t1 .eq. t2)

  t2 = (/2_i8, 2_i8, 2_i8/)
  @assertFalse(t1 .eq. t2)

  t1 = x
  @assertTrue(t1 .eq. t2)

  t2 = (/2_i8, 3_i8, 4_i8/)
  @assertFalse(t1 .eq. t2)

  t1 = t2
  @assertTrue(t1 .eq. t2)

end subroutine test_tuple3_i8

@test
subroutine test_tuple4_i8
  use pfunit
  use num_types, only : i8
  use tuple
  implicit none
  type(tuple4_i8_t) :: t1, t2
  integer :: i
  integer(i8) :: x(4) = (/2_i8, 2_i8, 2_i8, 2_i8/)
  t1 = (/1_i8, 2_i8, 3_i8, 4_i8/)
  t2 = (/1_i8, 2_i8, 3_i8, 4_i8/)

  do i = 1, 4
     @assertEqual(t1%x(i), t2%x(i))
  end do
  @assertTrue(t1 .eq. t2)

  t2 = (/2_i8, 2_i8, 2_i8, 2_i8/)
  @assertFalse(t1 .eq. t2)

  t1 = x
  @assertTrue(t1 .eq. t2)

  t2 = (/2_i8, 3_i8, 4_i8, 5_i8/)
  @assertFalse(t1 .eq. t2)

  t1 = t2
  @assertTrue(t1 .eq. t2)

end subroutine test_tuple4_i8

@test
subroutine test_tuple_r8
  use pfunit
  use tuple
  use num_types
  implicit none
  type(tuple_r8_t) :: t1, t2
  integer :: i
  real(kind=dp) :: x(2) = (/2d0, 2d0/)
  t1 = (/1d0, 2d0/)
  t2 = (/1d0, 2d0/)

  do i = 1, 2
     @assertEqual(t1%x(i), t2%x(i))
  end do
  @assertTrue(t1 .eq. t2)

  t2 = (/2d0, 2d0/)
  @assertFalse(t1 .eq. t2)

  t1 = x
  @assertTrue(t1 .eq. t2)

  t2 = (/2d0, 3d0/)
  @assertFalse(t1 .eq. t2)

  t1 = t2
  @assertTrue(t1 .eq. t2)

end subroutine test_tuple_r8

@test
subroutine test_tuple_i4r8
  use pfunit
  use tuple
  use num_types
  implicit none
  type(tuple_i4r8_t) :: t1, t2
  integer :: i
  real(kind=dp) :: x(2) = (/2d0, 2d0/)

  t1 = (/1, 2/)
  t2 = (/1d0, 2d0/)

  @assertEqual(t1%x, t2%x)
  @assertEqual(t1%y, t2%y)
  @assertTrue(t1 .eq. t2)

  t2 = (/2d0, 2d0/)
  @assertFalse(t1 .eq. t2)

  t1 = x
  @assertTrue(t1 .eq. t2)

  t2 = (/2d0, 3d0/)
  @assertFalse(t1 .eq. t2)

  t1 = t2
  @assertTrue(t1 .eq. t2)

end subroutine test_tuple_i4r8

@test
subroutine test_tuple_2i4r8
  use pfunit
  use tuple
  use num_types
  implicit none
  type(tuple_2i4r8_t) :: t1, t2
  integer :: i
  real(kind=dp) :: x(3) = (/2d0, 2d0, 2d0/)

  t1 = (/1, 2, 3/)
  t2 = (/1d0, 2d0, 3d0/)

  @assertEqual(t1%x, t2%x)
  @assertEqual(t1%y, t2%y)
  @assertEqual(t1%z, t2%z)
  @assertTrue(t1 .eq. t2)

  t2 = (/2d0, 2d0, 2d0/)
  @assertFalse(t1 .eq. t2)

  t1 = x
  @assertTrue(t1 .eq. t2)

  t2 = (/2d0, 3d0, 4d0/)
  @assertFalse(t1 .eq. t2)

  t1 = t2
  @assertTrue(t1 .eq. t2)

end subroutine test_tuple_2i4r8
