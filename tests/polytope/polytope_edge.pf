@test
subroutine test_edge_init
  use pfunit
  use num_types, only : i4
  use vertex_cnn, only : vertex_cnn_t, vertex_cnn_ptr
  use edge_cnn, only : edge_cnn_t
  implicit none
  type(vertex_cnn_t) :: vertex1, vertex2, vertex3, vertex4
  type(vertex_cnn_ptr), dimension(:), allocatable :: facet
  type(edge_cnn_t) :: edge1, edge2
  integer(i4) :: ishare
  integer(i4), dimension(:, :), allocatable :: facetp

  call vertex1%init(1)
  call vertex2%init(2)
  call vertex3%init(3)
  call vertex4%init(4)

  ! self-periodic edge
  call edge1%init(1, vertex1, vertex1)
  @assertTrue(edge1%selfp())
  call edge1%init(1, vertex1, vertex2)
  @assertFalse(edge1%selfp())

  ! facets pointers
  call edge1%fct(facet)
  @assertTrue(facet(1)%obj.eq.vertex1)
  @assertTrue(facet(2)%obj.eq.vertex2)
  @assertFalse(facet(2)%obj.eq.vertex1)
  deallocate(facet)

  ! edge initialisation and equality
  call edge2%init(2, vertex3, vertex4)
  @assertFalse(edge1.eq.edge2)
  call edge2%init(1, vertex2, vertex1)
  @assertTrue(edge1.eq.edge2)

  ! shared facets
  ! This test is implementation dependent, so not sure how to deal with it not
  ! to make a code very complex
  call edge1%fct_share(edge1, ishare, facetp)
  @assertEqual(size(facetp, 1), 2)
  @assertEqual(size(facetp, 2), 4)
  @assertEqual(ishare, 2)
  @assertEqual(facetp(1, 1), 1)
  @assertEqual(facetp(2, 1), 1)
  @assertEqual(facetp(1, 2), 2)
  @assertEqual(facetp(2, 2), 2)
  call edge2%init(2, vertex2, vertex1)
  deallocate(facetp)
  call edge1%fct_share(edge2, ishare, facetp)
  @assertEqual(ishare, 2)
  @assertEqual(facetp(1, 1), 1)
  @assertEqual(facetp(2, 1), 2)
  @assertEqual(facetp(1, 2), 2)
  @assertEqual(facetp(2, 2), 1)
  call edge2%init(2, vertex2, vertex3)
  deallocate(facetp)
  call edge1%fct_share(edge2, ishare, facetp)
  @assertEqual(ishare, 1)
  @assertEqual(facetp(1, 1), 2)
  @assertEqual(facetp(2, 1), 1)
  @assertEqual(facetp(1, 2), 0)
  @assertEqual(facetp(2, 2), 0)
  call edge2%init(2, vertex1, vertex1)
  deallocate(facetp)
  call edge1%fct_share(edge2, ishare, facetp)
  @assertEqual(ishare, 2)
  @assertEqual(facetp(1, 1), 1)
  @assertEqual(facetp(2, 1), 1)
  @assertEqual(facetp(1, 2), 1)
  @assertEqual(facetp(2, 2), 2)
  call edge1%init(1, vertex1, vertex1)
  deallocate(facetp)
  call edge1%fct_share(edge2, ishare, facetp)
  @assertEqual(ishare, 4)
  @assertEqual(facetp(1, 1), 1)
  @assertEqual(facetp(2, 1), 1)
  @assertEqual(facetp(1, 2), 1)
  @assertEqual(facetp(2, 2), 2)
  @assertEqual(facetp(1, 3), 2)
  @assertEqual(facetp(2, 3), 1)
  @assertEqual(facetp(1, 4), 2)
  @assertEqual(facetp(2, 4), 2)
  deallocate(facetp)
end subroutine test_edge_init

@test
subroutine test_edge_alignment
  use pfunit
  use num_types, only : i4
  use vertex_cnn, only : vertex_cnn_t, vertex_cnn_ptr
  use edge_cnn, only : edge_cnn_t, edge_cnn_ptr, edge_aligned_cnn_t
  implicit none
  type(vertex_cnn_t) :: vertex1, vertex2
  type(edge_cnn_ptr) :: edgep
  type(edge_cnn_t) :: edge1, edge2
  type(edge_aligned_cnn_t) :: edgea

  call vertex1%init(1)
  call vertex2%init(2)

  call edge1%init(1, vertex1, vertex2)
  call edge2%init(1, vertex2, vertex1)
  call edgea%init(edge1, 0)

  ! check pointers
  call edgea%edgep(edgep)
  @assertTrue(edgea%edge%obj.eq.edge1)

  ! check alignment test
  @assertTrue(edgea%test(edge1))
  @assertFalse(edgea%test(edge2))

  call edgea%init(edge1, 1)
  @assertTrue(edgea%test(edge2))
  @assertFalse(edgea%test(edge1))

end subroutine test_edge_alignment
