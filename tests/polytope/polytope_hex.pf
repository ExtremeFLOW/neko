@test
subroutine test_hex_init
  use pfunit
  use num_types, only : i4
  use vertex_cnn, only : vertex_cab_t
  use edge_cnn, only : edge_cab_t
  use quad_cnn, only : quad_cab_t, NEKO_QUAD_NFACET
  use hex_cnn, only : hex_cac_t, fct_to_rdg, fct_to_pek, rdg_to_pek,&
       & NEKO_HEX_NFACET, NEKO_HEX_NRIDGE, NEKO_HEX_NPEAK
  implicit none
  type(vertex_cab_t), dimension(8) :: vertex
  type(edge_cab_t), dimension(12) :: edge
  integer(i4), dimension(NEKO_QUAD_NFACET) :: algne
  type(quad_cab_t), dimension(6) :: quad
  integer(i4), dimension(NEKO_HEX_NFACET) :: algnq
  type(hex_cac_t) :: hex1
  integer(i4) :: il

  ! Vertices for hex
  do il = 1, NEKO_HEX_NPEAK
     call vertex(il)%init(il)
  end do

  ! simple hex
  ! add edges
  do il = 1, NEKO_HEX_NRIDGE
     call edge(il)%init(il, vertex(rdg_to_pek(1, il)),&
          & vertex(rdg_to_pek(2, il)))
  end do
  ! simple edge alignment
  algne(:) = 0
  ! quads
  do il = 1, NEKO_HEX_NFACET
     call quad(il)%init(il, edge(fct_to_rdg(1, il)), edge(fct_to_rdg(2, il)),&
          & edge(fct_to_rdg(3, il)), edge(fct_to_rdg(4, il)), algne)
  end do
  ! simple quad alignment
  algnq(:) = 0
  ! hex
  call hex1%init(1, quad(1), quad(2), quad(3), quad(4), quad(5), quad(6), algnq)
  @assertFalse(hex1%selfp())
  call hex_element_test(hex1, quad, edge, vertex)

  ! Test various orientations of a single face
  ! I rotate face 1 built of edges (9, 11 ,5, 7) and vertices (1, 3, 5, 7)
  ! Identity { 1, 2, 3, 4 } already tested
  ! T { 1, 3, 2, 4 }
  call quad(1)%init(1, edge(5), edge(7), edge(9), edge(11), algne)
  algnq(1) = 1
  call hex1%init(1, quad(1), quad(2), quad(3), quad(4), quad(5), quad(6), algnq)
  call hex_element_test(hex1, quad, edge, vertex)
  ! PX { 2, 1, 4, 3 }
  algne(:) = 0
  algne(3) = 1
  algne(4) = 1
  call quad(1)%init(1, edge(11), edge(9), edge(5), edge(7), algne)
  algnq(1) = 2
  call hex1%init(1, quad(1), quad(2), quad(3), quad(4), quad(5), quad(6), algnq)
  call hex_element_test(hex1, quad, edge, vertex)
  ! PXT { 2, 4, 1, 3 }
  algne(:) = 0
  algne(1) = 1
  algne(2) = 1
  call quad(1)%init(1, edge(5), edge(7), edge(11), edge(9), algne)
  algnq(1) = 3
  call hex1%init(1, quad(1), quad(2), quad(3), quad(4), quad(5), quad(6), algnq)
  call hex_element_test(hex1, quad, edge, vertex)
  ! PYT { 3, 1, 4, 2 }
  algne(:) = 0
  algne(3) = 1
  algne(4) = 1
  call quad(1)%init(1, edge(7), edge(5), edge(9), edge(11), algne)
  algnq(1) = 4
  call hex1%init(1, quad(1), quad(2), quad(3), quad(4), quad(5), quad(6), algnq)
  call hex_element_test(hex1, quad, edge, vertex)
  ! PY { 3, 4, 1, 2 }
  algne(:) = 0
  algne(1) = 1
  algne(2) = 1
  call quad(1)%init(1, edge(9), edge(11), edge(7), edge(5), algne)
  algnq(1) = 5
  call hex1%init(1, quad(1), quad(2), quad(3), quad(4), quad(5), quad(6), algnq)
  call hex_element_test(hex1, quad, edge, vertex)
  ! PXPYT { 4, 2, 3, 1 }
  algne(:) = 1
  call quad(1)%init(1, edge(7), edge(5), edge(11), edge(9), algne)
  algnq(1) = 6
  call hex1%init(1, quad(1), quad(2), quad(3), quad(4), quad(5), quad(6), algnq)
  call hex_element_test(hex1, quad, edge, vertex)
  ! PXPY { 4, 3, 2, 1 }
  call quad(1)%init(1, edge(11), edge(9), edge(7), edge(5), algne)
  algnq(1) = 7
  call hex1%init(1, quad(1), quad(2), quad(3), quad(4), quad(5), quad(6), algnq)
  call hex_element_test(hex1, quad, edge, vertex)

end subroutine test_hex_init

subroutine hex_element_test(hex, quad, edge, vertex)
  use pfunit
  use num_types, only : i4
  use vertex_cnn, only : vertex_cab_t, vertex_ncnf_cac_ptr
  use edge_cnn, only : edge_cab_t, edge_ncnf_cac_ptr
  use quad_cnn, only : quad_cab_t, quad_ncnf_cac_ptr
  use hex_cnn, only : hex_cac_t, NEKO_HEX_NFACET, NEKO_HEX_NRIDGE,&
       & NEKO_HEX_NPEAK
  implicit none
  type(hex_cac_t), intent(in) :: hex
  type(quad_cab_t), dimension(6), intent(in) :: quad
  type(edge_cab_t), dimension(12), intent(in) :: edge
  type(vertex_cab_t), dimension(8), intent(in) :: vertex
  type(quad_ncnf_cac_ptr) :: facet
  type(edge_ncnf_cac_ptr) :: ridge
  type(vertex_ncnf_cac_ptr) :: peak
  integer(i4) :: il

  ! facets
  do il = 1, NEKO_HEX_NFACET
     call hex%fct(facet, il)
     @assertTrue(facet%ptr%face%ptr .eq. quad(il))
  end do
  ! ridges
  do il = 1, NEKO_HEX_NRIDGE
     call hex%rdg(ridge, il)
     @assertTrue(ridge%ptr%edge%ptr .eq. edge(il))
  end do
  ! peaks
  do il = 1, NEKO_HEX_NPEAK
     call hex%pek(peak, il)
     @assertTrue(peak%ptr%vertex%ptr .eq. vertex(il))
  end do

end subroutine hex_element_test

! MISSING TESTS FOR SHARE AND EQUAL (EQUAL NOT FINALISED YET)
! MISSING TESTS FOR NONCONFORMING VERSION (NOT FINALISED YET)
