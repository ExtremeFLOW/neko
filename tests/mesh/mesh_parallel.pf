module mesh_parallel
  use mpi
  use pfunit
  use datadist
  use mesh
  use num_types
  use hex
  use quad
  implicit none

contains

  @test(npes=[1,2])
  subroutine test_mesh_init_nelv(this)
    class (MpiTestMethod), intent(inout) :: this
    type(mesh_t) :: m
    integer :: ierr, gdim, nelv, expected

    call MPI_Comm_dup(this%getMpiCommunicator(), NEKO_COMM, ierr)


    do gdim = 2,3
       nelv = 42

       call mesh_init(m, gdim, nelv)

       @assertEqual(m%nelv, nelv)
       @assertEqual(m%gdim, gdim)
       if (gdim .eq. 2) then
          @assertEqual(NEKO_QUAD_NPTS, m%npts)
       else
          @assertEqual(NEKO_HEX_NPTS, m%npts)
       end if
    
       expected = this%getNumProcesses() * nelv
       @MPIassertEqual(expected, m%glb_nelv)
    end do

  end subroutine test_mesh_init_nelv

  @test(npes=[1,2])
  subroutine test_mesh_init_dist(this)
    class (MpiTestMethod), intent(inout) :: this
    type(mesh_t) :: m
    type(linear_dist_t) :: dist
    integer :: ierr, gdim

    call MPI_Comm_dup(this%getMpiCommunicator(), NEKO_COMM, ierr)

    dist = linear_dist_t(42, this%getProcessRank(), &
         this%getNumProcesses(), NEKO_COMM)

    do gdim = 2,3
       call mesh_init(m, gdim, dist)

        @assertEqual(m%nelv, dist%num_local())
        @assertEqual(m%gdim, gdim)
        if (gdim .eq. 2) then
           @assertEqual(NEKO_QUAD_NPTS, m%npts)
        else
           @assertEqual(NEKO_HEX_NPTS, m%npts)
        end if
    
        @MPIassertEqual(dist%num_global(), m%glb_nelv)
     end do

  end subroutine test_mesh_init_dist

end module mesh_parallel
