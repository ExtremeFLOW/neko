
@test
subroutine test_mathops_opchsign
  use pfunit
  use mathops
  implicit none 
  integer, parameter :: n = 17
  real(kind=rp), dimension(n) :: a1, a2, a3
  integer :: i, gdim

  do gdim = 2, 3
     a1 = 1.0_rp
     a2 = 2.0_rp
     a3 = 3.0_rp
     call opchsign(a1, a2, a3, gdim, n)

     do i = 1, n
        @assertEqual(a1(i), -1.0_rp)
        @assertEqual(a2(i), -2.0_rp)
        if (gdim .eq. 3) then
           @assertEqual(a3(i), -3.0_rp)
        end if
     end do
  end do
end subroutine test_mathops_opchsign

@test
subroutine test_mathops_opcolv
  use pfunit
  use mathops
  implicit none 
  integer, parameter :: n = 17
  real(kind=rp), parameter :: c(n) = 42.0_rp
  real(kind=rp), dimension(n) :: a1, a2, a3
  integer :: i, gdim

  do gdim = 2, 3
     a1 = 1.0_rp
     a2 = 2.0_rp
     a3 = 3.0_rp
     call opcolv(a1, a2, a3, c, gdim, n)

     do i = 1, n
        @assertEqual(a1(i), 42.0_rp)
        @assertEqual(a2(i), 84.0_rp)
        if (gdim .eq. 3) then
           @assertEqual(a3(i), 126.0_rp)
        end if
     end do
  end do
end subroutine test_mathops_opcolv

@test
subroutine test_mathops_opcolv3c
  use pfunit
  use mathops
  implicit none 
  integer, parameter :: n = 17
  real(kind=rp), parameter :: c(n) = 42.0_rp
  real(kind=rp), parameter :: d = 1/42.0_rp
  real(kind=rp), dimension(n) :: a1, a2, a3
  real(kind=rp), dimension(n) :: b1, b2, b3
  integer :: i, gdim

  do gdim = 2, 3
     a1 = 4711.0_rp
     a2 = 4711.0_rp
     a3 = 4711.0_rp
     b1 = 1.0_rp
     b2 = 2.0_rp
     b3 = 3.0_rp
     
     call opcolv3c(a1, a2, a3, b1, b2, b3, c, d, n, gdim)

     do i = 1, n
        @assertEqual(a1(i), 1.0_rp)
        @assertEqual(a2(i), 2.0_rp)
        if (gdim .eq. 3) then
           @assertEqual(a3(i), 3.0_rp)
        end if
     end do
  end do
end subroutine test_mathops_opcolv3c

@test
subroutine test_mathops_opadd2cm
  use pfunit
  use mathops
  implicit none 
  integer, parameter :: n = 17
  real(kind=rp), parameter :: c = 42.0_rp
  real(kind=rp), dimension(n) :: a1, a2, a3
  real(kind=rp), dimension(n) :: b1, b2, b3
  integer :: i, gdim

  do gdim = 2, 3
     a1 = 4711.0_rp
     a2 = 4711.0_rp
     a3 = 4711.0_rp
     b1 = 1.0_rp
     b2 = 2.0_rp
     b3 = 3.0_rp
     
     call opadd2cm(a1, a2, a3, b1, b2, b3, c, n, gdim)

     do i = 1, n
        @assertEqual(a1(i), 4753.0_rp)
        @assertEqual(a2(i), 4795.0_rp)
        if (gdim .eq. 3) then
           @assertEqual(a3(i), 4837.0_rp)
        end if
     end do
  end do
end subroutine test_mathops_opadd2cm

@test
subroutine test_mathops_opadd2col
  use pfunit
  use mathops
  implicit none 
  integer, parameter :: n = 17
  real(kind=rp), parameter :: c(n) = 42.0_rp
  real(kind=rp), dimension(n) :: a1, a2, a3
  real(kind=rp), dimension(n) :: b1, b2, b3
  integer :: i, gdim

  do gdim = 2, 3
     a1 = 4711.0_rp
     a2 = 4711.0_rp
     a3 = 4711.0_rp
     b1 = 1.0_rp
     b2 = 2.0_rp
     b3 = 3.0_rp
     
     call opadd2col(a1, a2, a3, b1, b2, b3, c, n, gdim)

     do i = 1, n
        @assertEqual(a1(i), 4753.0_rp)
        @assertEqual(a2(i), 4795.0_rp)
        if (gdim .eq. 3) then
           @assertEqual(a3(i), 4837.0_rp)
        end if
     end do
  end do
end subroutine test_mathops_opadd2col



